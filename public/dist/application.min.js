"use strict";var ApplicationConfiguration=function(){var applicationModuleName="ophthalmocare",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ngLodash","angular-loading-bar","toaster","webcam","akoenig.deckgrid","ngImgCrop","angularMoment","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("action"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("directives"),ApplicationConfiguration.registerModule("manage-users"),ApplicationConfiguration.registerModule("module"),ApplicationConfiguration.registerModule("patients"),ApplicationConfiguration.registerModule("roles"),ApplicationConfiguration.registerModule("security"),ApplicationConfiguration.registerModule("users"),angular.module("action").factory("Action",["$resource",function($resource){return $resource("action/list")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").factory("Logger",["$log","toaster",function($log,toaster){var logger={};return logger.note=function(message,show_toast){$log.log(message),show_toast&&toaster.pop("note","Note",message)},logger.success=function(message,show_toast){$log.info(message),show_toast&&toaster.pop("success","Success",message)},logger.warn=function(message,show_toast){$log.warn(message),show_toast&&toaster.pop("warning","Warning",message)},logger.error=function(message,show_toast){if(Array.isArray(message))for(var i in message)$log.error(message[i]),show_toast&&toaster.pop("error","Error",message[i]);else $log.error(message),show_toast&&toaster.pop("error","Error",message)},logger.debug=function(messsage){$log.debug(messsage)},logger}]),angular.module("core").service("Menus",["lodash",function(lodash){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(this.items){for(var itemIndex in this.items)if(this.items[itemIndex].items){for(var subItemIndex in this.items[itemIndex].items)if(lodash.contains(user._role._actions,this.items[itemIndex].items[subItemIndex].action))return!0}else if(lodash.contains(user._role._actions,this.items[itemIndex].action))return!0}else if(lodash.contains(user._role._actions,this.action))return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic){return this.menus[menuId]={isPublic:isPublic||!1,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,action,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,action:null===action||"undefined"==typeof action?this.menus[menuId].items[itemIndex].action:action,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",!1)}]),angular.module("directives").directive("hCareDelButton",["Authentication","lodash",function(Authentication,lodash){return{restrict:"E",replace:!0,link:function(scope,el,atts){if(lodash.contains(Authentication.user._role._actions,atts.action)){var buttonText="<a class='btn btn-primary' ><i class='glyphicon glyphicon-trash'></i></a>";el.html(buttonText),el.on("click",function(){var result=confirm(atts.delMessage);result&&scope.$apply(atts.hcareDelClick)})}}}}]),angular.module("directives").directive("hCareEditButton",["Authentication","lodash",function(Authentication,lodash){return{restrict:"E",replace:!0,scope:{href:"@"},link:function(scope,el,atts){lodash.contains(Authentication.user._role._actions,atts.action)&&atts.$observe("href",function(href){var buttonText='<a class="btn btn-primary" href='+href+'><i class="glyphicon glyphicon-edit"></i></a>';el.html(buttonText)})}}}]),angular.module("manage-users").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Users","manage-users","dropdown","/manage-users(/create)?",!1,1),Menus.addSubMenuItem("topbar","manage-users","List users","manage-users","/manage-users",!1,"list_users",0),Menus.addSubMenuItem("topbar","manage-users","New user","manage-users/create","/manage-users/create",!1,"create_user",1)}]),angular.module("manage-users").config(["$stateProvider",function($stateProvider){$stateProvider.state("listManageUsers",{url:"/manage-users",templateUrl:"modules/manage-users/views/list-manage-users.client.view.html"}).state("createManageUser",{url:"/manage-users/create",templateUrl:"modules/manage-users/views/create-manage-user.client.view.html"}).state("viewManageUser",{url:"/manage-users/:manageUserId",templateUrl:"modules/manage-users/views/view-manage-user.client.view.html"}).state("editManageUser",{url:"/manage-users/:manageUserId/edit",templateUrl:"modules/manage-users/views/edit-manage-user.client.view.html"})}]),angular.module("manage-users").controller("ManageUsersController",["$scope","$stateParams","$location","Authentication","ManageUsers","Roles","lodash","Logger",function($scope,$stateParams,$location,Authentication,ManageUsers,Roles,lodash,Logger){$scope.authentication=Authentication,$scope._=lodash,$scope.roles=Roles.query(),lodash.mixin({findByValues:function(collection,property,values){return lodash.filter(collection,function(item){return lodash.contains(values,item[property])})}}),lodash.mixin({findByValuesInPath:function(collection,property,values,path){return lodash.filter(collection,function(item){return lodash.contains(lodash.map(values,path),item[property])})}}),$scope.toggleRoleSelection=function(role_id){$scope.manageUser._role=role_id},$scope.initOne=function(){$scope.manageUser=new ManageUsers({password:Math.random().toString(36).slice(-8)})},$scope.create=function(){var manageUser=$scope.manageUser;manageUser.$save(function(response){$location.path("manage-users/"+response._id),Logger.success("User created successfully",!0),$scope.initOne()},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.remove=function(manageUser){manageUser?manageUser.$remove(function(){for(var i in $scope.manageUsers)$scope.manageUsers[i]===manageUser&&$scope.manageUsers.splice(i,1);Logger.success("User deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)}):$scope.manageUser.$remove(function(){$location.path("manage-users"),Logger.success("User deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.update=function(){var manageUser=$scope.manageUser;manageUser.$update(function(){$location.path("manage-users/"+manageUser._id),Logger.success("User updated successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.find=function(){$scope.manageUsers=ManageUsers.query()},$scope.findOne=function(){$scope.manageUser=ManageUsers.get({manageUserId:$stateParams.manageUserId})}}]),angular.module("manage-users").factory("ManageUsers",["$resource",function($resource){return $resource("manage-users/:manageUserId",{manageUserId:"@_id"},{update:{method:"PUT"}})}]),angular.module("module").factory("Module",["$resource",function($resource){return $resource("module/list")}]),angular.module("patients").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Patients","patients","dropdown","/patients(/create)?",!1,2),Menus.addSubMenuItem("topbar","patients","List Patients","patients","/patients",!1,"list_patients",0),Menus.addSubMenuItem("topbar","patients","New Patient","patients/create","/patients/create",!1,"create_patient",1)}]),angular.module("patients").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPatients",{url:"/patients",templateUrl:"modules/patients/views/list-patients.client.view.html",action:"list_patients"}).state("createPatient",{url:"/patients/create",templateUrl:"modules/patients/views/create-patient.client.view.html",action:"create_patient"}).state("viewPatient",{url:"/patients/:patientId",templateUrl:"modules/patients/views/view-patient.client.view.html",action:"view_patient"}).state("editPatient",{url:"/patients/:patientId/edit",templateUrl:"modules/patients/views/edit-patient.client.view.html",action:"edit_patient"})}]),angular.module("patients").controller("PatientsController",["$scope","$stateParams","$location","Authentication","Patients","Logger","lodash","moment","$modal","$upload",function($scope,$stateParams,$location,Authentication,Patients,Logger,lodash,Moment,$modal,$upload){$scope.authentication=Authentication,$scope._=lodash,$scope.Moment=Moment,$scope.genders=[{_id:"male",name:"Male"},{_id:"female",name:"Female"}],$scope.photo=null,$scope.today=function(){$scope.patient.birthDate=new Moment},$scope.clear=function(){$scope.patient.birthDate=null},$scope.maxDate=new Moment,$scope.minDate=(new Moment).subtract(150,"years"),$scope.openDatePicker=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.dateOptions={formatYear:"yyyy",startingDay:6},$scope.format="yyyy/MM/dd",$scope.ageChanged=function(age){$scope.patient.birthDate=(new Moment).subtract(age,"years").format("YYYY/MM/DD")},$scope.birthDateChanged=function(birthDate){$scope.patient.age=(new Moment).diff(new Moment(birthDate),"years")},lodash.mixin({findByValues:function(collection,property,values){return lodash.filter(collection,function(item){return lodash.contains(values,item[property])})}}),lodash.mixin({findByValuesInPath:function(collection,property,values,path){return lodash.filter(collection,function(item){return lodash.contains(lodash.map(values,path),item[property])})}}),$scope.openModal=function(size){var modalInstance=$modal.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",size:size,resolve:{items:function(){return $scope.items}}});modalInstance.result.then(function(finalPhoto){$scope.photo=finalPhoto,$scope.photoCss="{'background-image': 'url('+$scope.photo+')'}"},function(){})},$scope.toggleGenderSelection=function(gender_id){$scope.patient.gender=gender_id};var dataURItoBlob=function(dataURI){for(var binary=atob(dataURI.split(",")[1]),mimeString=dataURI.split(",")[0].split(":")[1].split(";")[0],array=[],i=0;i<binary.length;i++)array.push(binary.charCodeAt(i));return new Blob([new Uint8Array(array)],{type:mimeString})};$scope.create=function(){var patient=angular.fromJson(angular.toJson($scope.patient));$scope.photo&&lodash.extend(patient,{personalPhoto:!0});var blob=$scope.photo?dataURItoBlob($scope.photo):null;$upload.upload({url:"/patients",method:"POST",headers:{"Content-Type":"multipart/form-data"},data:patient,file:blob,fileName:"personal-photo"}).success(function(response){$location.path("patients/"+response.id),response.warn?Logger.warn(response.error.message,!0):Logger.success("Patient created successfully",!0),$scope.initOne()}).error(function(err){Logger.error(err,!0)})},$scope.remove=function(patient){patient?patient.$remove(function(){for(var i in $scope.patients)$scope.patients[i]===patient&&$scope.patients.splice(i,1);Logger.success("Patient deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)}):$scope.patient.$remove(function(){$location.path("patients"),Logger.success("Patient deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.update=function(){var patient=$scope.patient;patient.$update(function(){$location.path("patients/"+patient.id),Logger.success("Patient updated successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.find=function(){$scope.patients=Patients.query()},$scope.findOne=function(){$scope.patient=Patients.get({patientId:$stateParams.patientId},function(){if($scope.patient.personalPhoto){var filePath="patients/personal-photo/"+$scope.patient.id;$scope.patient.personalPhoto=filePath}})},$scope.initOne=function(){$scope.patient=new Patients({})}}]),angular.module("patients").controller("ModalInstanceCtrl",["$scope","$modalInstance","items","Logger",function($scope,$modalInstance){$scope.tabs=[{active:!0,disabled:!1},{active:!1,disabled:!1},{active:!1,disabled:!0}];var _video=null;$scope.photos=[],$scope.onSuccess=function(videoElem){_video=videoElem},$scope.photoWidth=null,$scope.photoHeight=null,$scope.finalPhoto=null;var getVideoData=function(){var hiddenCanvas=document.createElement("canvas");hiddenCanvas.width=_video.width,hiddenCanvas.height=_video.height;var ctx=hiddenCanvas.getContext("2d");return ctx.drawImage(_video,0,0,_video.width,_video.height),$scope.photoWidth=document.defaultView.getComputedStyle(_video,"").getPropertyValue("width"),$scope.photoHeight=document.defaultView.getComputedStyle(_video,"").getPropertyValue("height"),hiddenCanvas.toDataURL()};$scope.makeSnapshot=function(){if(_video){var idata=getVideoData();$scope.photos.push({src:idata})}},$scope.selectedPhoto=null;var img=new Image;img.onload=function(){this.width,this.height,this.src},$scope.inputImage=null,$scope.inputPhoto=function(files){var file=files[0],reader=new FileReader;reader.onload=function(evt){$scope.$apply(function($scope){$scope.inputImage=evt.target.result,img.src=evt.target.result})},reader.readAsDataURL(file)},$scope.selectInputPhoto=function(){$scope.photoWidth=img.width,$scope.photoHeight=img.height,console.log($scope.photoWidth),console.log($scope.photoHeight),$scope.tabs[2].disabled=!1},$scope.selectPhoto=function(photo){$scope.selectedPhoto=photo,$scope.tabs[2].disabled=!1,$scope.tabs[2].active=!0},$scope.webcamError=!1,$scope.onCamError=function(err){$scope.$apply(function(){$scope.webcamError=err})},$scope.photoCropped=function($dataURI){$scope.finalPhoto=$dataURI},$scope.ok=function(){$modalInstance.close($scope.finalPhoto)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("patients").directive("backImg",function(){return function(scope,element,attrs){attrs.$observe("backImg",function(value){element.css({"background-image":"url("+value+")"})})}}),angular.module("patients").directive("widthCss",function(){return function(scope,element,attrs){attrs.$observe("widthCss",function(value){element.css({width:value})})}}),angular.module("patients").directive("heightCss",function(){return function(scope,element,attrs){attrs.$observe("heightCss",function(value){element.css({height:value})})}}),angular.module("patients").factory("Patients",["$resource",function($resource){return $resource("patients/:patientId",{patientId:"@id"},{update:{method:"PUT"}})}]),angular.module("roles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Roles","roles","dropdown","/roles(/create)?(/search)?",!1,0),Menus.addSubMenuItem("topbar","roles","List Roles","roles","/roles",!1,"list_roles",0),Menus.addSubMenuItem("topbar","roles","New Role","roles/create","/roles/create",!1,"create_role",1),Menus.addSubMenuItem("topbar","roles","Search Roles","roles/search","/roles/search",!1,"search_roles",2)}]),angular.module("roles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRoles",{url:"/roles",templateUrl:"modules/roles/views/list-roles.client.view.html",requiresLogin:!0,action:"list_roles"}).state("createRole",{url:"/roles/create",templateUrl:"modules/roles/views/create-role.client.view.html",requiresLogin:!0,action:"create_role"}).state("searchRoles",{url:"/roles/search",templateUrl:"modules/roles/views/search-roles.client.view.html",requiresLogin:!0,action:"search_roles"}).state("editRole",{url:"/roles/:roleId/edit",templateUrl:"modules/roles/views/edit-role.client.view.html",requiresLogin:!0,action:"edit_role"}).state("viewRole",{url:"/roles/:roleId",templateUrl:"modules/roles/views/view-role.client.view.html",requiresLogin:!0,action:"view_role"})}]),angular.module("roles").controller("RolesController",["$scope","$stateParams","$location","Authentication","Roles","Module","Action","lodash","Logger",function($scope,$stateParams,$location,Authentication,Roles,Module,Action,lodash,Logger){$scope.authentication=Authentication,$scope._=lodash,$scope.modules=$scope.modules||Module.query(),$scope.all_actions=$scope.all_actions||Action.query(),$scope.selected_module=$scope.selected_module||null,$scope.actions=$scope.actions||[],$scope.role_actions=$scope.role_actions||[],lodash.mixin({findByValues:function(collection,property,values){return lodash.filter(collection,function(item){return lodash.contains(values,item[property])})}}),lodash.mixin({findByValuesInPath:function(collection,property,values,path){return lodash.filter(collection,function(item){return lodash.contains(lodash.map(values,path),item[property])})}}),$scope.toggleModuleSelection=function(module){$scope.selected_module=module,$scope.actions=lodash.where($scope.all_actions,{_module:module._id})},$scope.toggleActionSelection=function(action){var exists=lodash.contains($scope.role_actions,action);exists?lodash.remove($scope.role_actions,action):$scope.role_actions.push(action)},$scope.create=function(){var role=new Roles({name:this.name,_actions:this.role_actions});role.$save(function(response){$location.path("roles/"+response._id),Logger.success("Role created successfully",!0),$scope.name="",$scope.selected_module=null,$scope.actions=[],$scope.role_actions=[]},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.remove=function(role){role?role.$remove(function(){for(var i in $scope.roles)$scope.roles[i]===role&&$scope.roles.splice(i,1);Logger.success("Role deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)}):$scope.role.$remove(function(){Logger.success("Role deleted successfully",!0),$location.path("roles")},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.update=function(){var role=$scope.role;role._actions=$scope.role_actions,role.$update(function(){$location.path("roles/"+role._id),Logger.success("Role updated successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.find=function(){$scope.roles=Roles.query()},$scope.findOne=function(){$scope.role=Roles.get({roleId:$stateParams.roleId},function(){$scope.role_actions=lodash.findByValues($scope.all_actions,"_id",$scope.role._actions)})}}]),angular.module("roles").factory("Roles",["$resource",function($resource){return $resource("roles/:roleId",{roleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("security").run(["$rootScope","Authentication","$location","lodash",function($rootScope,Authentication,$location,lodash){$rootScope.$on("$stateChangeStart",function(event,toState){if(toState.requiresLogin){if(!Authentication.user)return void $location.path("/signin");toState.action&&(lodash.contains(Authentication.user._role._actions,toState.action)||$location.path("/not-authorized"))}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("/signin");break;case 403:$location.path("/not-authorized")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("listUsers",{url:"/users",templateUrl:"modules/users/views/list-users.client.view.html",requiresLogin:!0,action:"list_users"}).state("createUser",{url:"/users/create",templateUrl:"modules/users/views/create-user.client.view.html",requiresLogin:!0,action:"create_user"}).state("viewUser",{url:"/users/:userId",templateUrl:"modules/users/views/view-user.client.view.html",requiresLogin:!0,action:"view_user"}).state("editUser",{url:"/users/:userId/edit",templateUrl:"modules/users/views/edit-user.client.view.html",requiresLogin:!0,action:"edit_user"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UsersController",["$scope","$stateParams","$location","Authentication","Users","Roles","lodash","Logger",function($scope,$stateParams,$location,Authentication,Users,Roles,lodash,Logger){$scope.authentication=Authentication,$scope._=lodash,$scope.roles=Roles.query(),lodash.mixin({findByValues:function(collection,property,values){return lodash.filter(collection,function(item){return lodash.contains(values,item[property])})}}),lodash.mixin({findByValuesInPath:function(collection,property,values,path){return lodash.filter(collection,function(item){return lodash.contains(lodash.map(values,path),item[property])})}}),$scope.toggleRoleSelection=function(role_id){$scope.user._role=role_id},$scope.create=function(){var user=$scope.user;user.$save(function(response){$location.path("users/"+response._id),Logger.success("User created successfully",!0),$scope.initOne()},function(errorResponse){console.log(errorResponse),Logger.error(errorResponse.data.message,!0)})},$scope.remove=function(user){user?user.$remove(function(){for(var i in $scope.users)$scope.users[i]===user&&$scope.users.splice(i,1);Logger.success("User deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)}):$scope.user.$remove(function(){$location.path("users"),Logger.success("User deleted successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.update=function(){var user=$scope.user;user.$update(function(){$location.path("users/"+user._id),Logger.success("User updated successfully",!0)},function(errorResponse){Logger.error(errorResponse.data.message,!0)})},$scope.find=function(){$scope.users=Users.query()},$scope.findOne=function(){$scope.user=Users.get({userId:$stateParams.userId})},$scope.initOne=function(){$scope.user=new Users({password:Math.random().toString(36).slice(-8)})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);